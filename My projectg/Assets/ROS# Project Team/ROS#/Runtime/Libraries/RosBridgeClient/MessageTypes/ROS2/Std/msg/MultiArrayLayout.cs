/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

namespace RosSharp.RosBridgeClient.MessageTypes.Std
{
    public class MultiArrayLayout : Message
    {
        public const string RosMessageName = "std_msgs/msg/MultiArrayLayout";

        //  This was originally provided as an example message.
        //  It is deprecated as of Foxy
        //  It is recommended to create your own semantically meaningful message.
        //  However if you would like to continue using this please use the equivalent in example_msgs.
        //  The multiarray declares a generic multi-dimensional array of a
        //  particular data type.  Dimensions are ordered from outer most
        //  to inner most.
        // 
        //  Accessors should ALWAYS be written in terms of dimension stride
        //  and specified outer-most dimension first.
        // 
        //  multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
        // 
        //  A standard, 3-channel 640x480 image with interleaved color channels
        //  would be specified as:
        // 
        //  dim[0].label  = "height"
        //  dim[0].size   = 480
        //  dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
        //  dim[1].label  = "width"
        //  dim[1].size   = 640
        //  dim[1].stride = 3*640 = 1920
        //  dim[2].label  = "channel"
        //  dim[2].size   = 3
        //  dim[2].stride = 3
        // 
        //  multiarray(i,j,k) refers to the ith row, jth column, and kth channel.
        public MultiArrayDimension[] dim { get; set; }
        //  Array of dimension properties
        public uint data_offset { get; set; }
        //  padding bytes at front of data

        public MultiArrayLayout()
        {
            this.dim = new MultiArrayDimension[0];
            this.data_offset = 0;
        }

        public MultiArrayLayout(MultiArrayDimension[] dim, uint data_offset)
        {
            this.dim = dim;
            this.data_offset = data_offset;
        }
    }
}
#endif
