/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

using RosSharp.RosBridgeClient.MessageTypes.Geometry;

namespace RosSharp.RosBridgeClient.MessageTypes.Shape
{
    public class SolidPrimitive : Message
    {
        public const string RosMessageName = "shape_msgs/msg/SolidPrimitive";

        //  Defines box, sphere, cylinder, cone and prism.
        //  All shapes are defined to have their bounding boxes centered around 0,0,0.
        public const byte BOX = 1;
        public const byte SPHERE = 2;
        public const byte CYLINDER = 3;
        public const byte CONE = 4;
        public const byte PRISM = 5;
        //  The type of the shape
        public byte type { get; set; }
        //  The dimensions of the shape
        public double dimensions { get; set; }
        //  At no point will dimensions have a length > 3.
        //  The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array.
        //  For type BOX, the X, Y, and Z dimensions are the length of the corresponding sides of the box.
        public const byte BOX_X = 0;
        public const byte BOX_Y = 1;
        public const byte BOX_Z = 2;
        //  For the SPHERE type, only one component is used, and it gives the radius of the sphere.
        public const byte SPHERE_RADIUS = 0;
        //  For the CYLINDER and CONE types, the center line is oriented along the Z axis.
        //  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component of dimensions gives the
        //  height of the cylinder (cone).
        //  The CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the radius of
        //  the base of the cylinder (cone).
        //  Cone and cylinder primitives are defined to be circular. The tip of the cone
        //  is pointing up, along +Z axis.
        public const byte CYLINDER_HEIGHT = 0;
        public const byte CYLINDER_RADIUS = 1;
        public const byte CONE_HEIGHT = 0;
        public const byte CONE_RADIUS = 1;
        //  For the type PRISM, the center line is oriented along Z axis.
        //  The PRISM_HEIGHT component of dimensions gives the
        //  height of the prism.
        //  The polygon defines the Z axis centered base of the prism.
        //  The prism is constructed by extruding the base in +Z and -Z
        //  directions by half of the PRISM_HEIGHT
        //  Only x and y fields of the points are used in the polygon.
        //  Points of the polygon are ordered counter-clockwise.
        public const byte PRISM_HEIGHT = 0;
        public Polygon polygon { get; set; }

        public SolidPrimitive()
        {
            this.type = 0;
            this.dimensions = 0.0;
            this.polygon = new Polygon();
        }

        public SolidPrimitive(byte type, double dimensions, Polygon polygon)
        {
            this.type = type;
            this.dimensions = dimensions;
            this.polygon = polygon;
        }
    }
}
#endif
