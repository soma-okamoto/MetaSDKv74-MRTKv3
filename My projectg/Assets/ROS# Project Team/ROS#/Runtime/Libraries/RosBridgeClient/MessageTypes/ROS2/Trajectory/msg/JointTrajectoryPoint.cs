/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */

#if ROS2

using RosSharp.RosBridgeClient.MessageTypes.BuiltinInterfaces;

namespace RosSharp.RosBridgeClient.MessageTypes.Trajectory
{
    public class JointTrajectoryPoint : Message
    {
        public const string RosMessageName = "trajectory_msgs/msg/JointTrajectoryPoint";

        //  Each trajectory point specifies either positions[, velocities[, accelerations]]
        //  or positions[, effort] for the trajectory to be executed.
        //  All specified values are in the same order as the joint names in JointTrajectory.msg.
        //  Single DOF joint positions for each joint relative to their "0" position.
        //  The units depend on the specific joint type: radians for revolute or
        //  continuous joints, and meters for prismatic joints.
        public double[] positions { get; set; }
        //  The rate of change in position of each joint. Units are joint type dependent.
        //  Radians/second for revolute or continuous joints, and meters/second for
        //  prismatic joints.
        public double[] velocities { get; set; }
        //  Rate of change in velocity of each joint. Units are joint type dependent.
        //  Radians/second^2 for revolute or continuous joints, and meters/second^2 for
        //  prismatic joints.
        public double[] accelerations { get; set; }
        //  The torque or the force to be applied at each joint. For revolute/continuous
        //  joints effort denotes a torque in newton-meters. For prismatic joints, effort
        //  denotes a force in newtons.
        public double[] effort { get; set; }
        //  Desired time from the trajectory start to arrive at this trajectory point.
        public Duration time_from_start { get; set; }

        public JointTrajectoryPoint()
        {
            this.positions = new double[0];
            this.velocities = new double[0];
            this.accelerations = new double[0];
            this.effort = new double[0];
            this.time_from_start = new Duration();
        }

        public JointTrajectoryPoint(double[] positions, double[] velocities, double[] accelerations, double[] effort, Duration time_from_start)
        {
            this.positions = positions;
            this.velocities = velocities;
            this.accelerations = accelerations;
            this.effort = effort;
            this.time_from_start = time_from_start;
        }
    }
}
#endif
